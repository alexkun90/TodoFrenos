// <auto-generated />
using System;
using DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(TodoFrenosDbContext))]
    [Migration("20240706173233_Table_suppliers")]
    partial class Table_suppliers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PrimApellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegunApellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Models.Appointment", b =>
                {
                    b.Property<long>("AppointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AppointId"));

                    b.Property<DateTime?>("AppointCreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("AppointDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("AppointModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AppointState")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("InspectionsIdInsep")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("AppointId");

                    b.HasIndex("InspectionsIdInsep");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DAL.Models.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StateCateg")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DAL.Models.CheckList", b =>
                {
                    b.Property<int>("IdCheckList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCheckList"));

                    b.Property<string>("CategoryVe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdInspect")
                        .HasColumnType("int");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateVeh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCheckList");

                    b.ToTable("CheckLists");
                });

            modelBuilder.Entity("DAL.Models.Inspections", b =>
                {
                    b.Property<int>("IdInsep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInsep"));

                    b.Property<int?>("CheckListIdCheckList")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInspection")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMecanico")
                        .HasColumnType("int");

                    b.Property<long>("IdVehicle")
                        .HasColumnType("bigint");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recomendation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("IdInsep");

                    b.HasIndex("CheckListIdCheckList");

                    b.HasIndex("VehicleId");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("DAL.Models.InvoiceDetail", b =>
                {
                    b.Property<long>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DetailId"));

                    b.Property<long>("MasterId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Taxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DetailId");

                    b.HasIndex("MasterId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("DAL.Models.InvoiceMaster", b =>
                {
                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MasterId"));

                    b.Property<DateTime>("DatePurchase")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Taxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MasterId");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceMasters");
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("ImageProduct")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StateProdc")
                        .HasColumnType("bit");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DAL.Models.ShoppingCart", b =>
                {
                    b.Property<long>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CartId"));

                    b.Property<DateTime?>("DateCart")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("DAL.Models.Suppliers", b =>
                {
                    b.Property<long>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SupplierId"));

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SupplierCreationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SupplierModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupplierState")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateOnly?>("SuppliertDate")
                        .HasColumnType("date");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("DAL.Models.Vehicle", b =>
                {
                    b.Property<long>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VehicleId"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CarState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModelYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeVeh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DAL.Models.VehicleInspection", b =>
                {
                    b.Property<long>("VehicleInspectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VehicleInspectionId"));

                    b.Property<string>("Brakes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatePerformed")
                        .HasColumnType("datetime2");

                    b.Property<string>("ElectricalSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Engine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextChangeDue")
                        .HasColumnType("datetime2");

                    b.Property<int>("OilChange")
                        .HasColumnType("int");

                    b.Property<string>("Steering")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suspension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tires")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("VehicleInspectionId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleInspections");
                });

            modelBuilder.Entity("DAL.Models.WorkPerformed", b =>
                {
                    b.Property<int>("IdWorkPer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWorkPer"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdInspe")
                        .HasColumnType("int");

                    b.Property<int>("InspeIdInsep")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextMaintenance")
                        .HasColumnType("datetime2");

                    b.HasKey("IdWorkPer");

                    b.HasIndex("InspeIdInsep");

                    b.ToTable("WorkPerformeds");
                });

            modelBuilder.Entity("DAL.Models.Appointment", b =>
                {
                    b.HasOne("DAL.Models.Inspections", null)
                        .WithMany("Appointments")
                        .HasForeignKey("InspectionsIdInsep");

                    b.HasOne("DAL.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Vehicle", "Vehicle")
                        .WithMany("Appointments")
                        .HasForeignKey("VehicleId");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DAL.Models.Inspections", b =>
                {
                    b.HasOne("DAL.Models.CheckList", null)
                        .WithMany("Inspections")
                        .HasForeignKey("CheckListIdCheckList");

                    b.HasOne("DAL.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DAL.Models.InvoiceDetail", b =>
                {
                    b.HasOne("DAL.Models.InvoiceMaster", "Master")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Product", "Product")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Models.InvoiceMaster", b =>
                {
                    b.HasOne("DAL.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.HasOne("DAL.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Models.ShoppingCart", b =>
                {
                    b.HasOne("DAL.Models.Product", "Product")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("ProductId");

                    b.HasOne("DAL.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Vehicle", b =>
                {
                    b.HasOne("DAL.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.VehicleInspection", b =>
                {
                    b.HasOne("DAL.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DAL.Models.WorkPerformed", b =>
                {
                    b.HasOne("DAL.Models.Inspections", "Inspe")
                        .WithMany()
                        .HasForeignKey("InspeIdInsep")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspe");
                });

            modelBuilder.Entity("DAL.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DAL.Models.CheckList", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("DAL.Models.Inspections", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DAL.Models.InvoiceMaster", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("DAL.Models.Vehicle", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
